#version 330
in vec3 ourColor;
in vec2 TexCoord;
in vec3 pos;
in vec3 Normal;

out vec4 color;

uniform sampler2D ourTexture;
uniform vec3 lightPos;
uniform vec3 lightColor;
uniform float lightMaxDistance;

struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Material material;

void main()
{
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - pos);
    float distance = length(lightPos - pos);
    float coeff = 0.0f;
    if(distance <= lightMaxDistance)
        coeff = max(1.0f - distance/lightMaxDistance, 0.01f);
    float diff = max(-dot(norm, lightDir), 0.0f);
    vec3 diffuse = diff * ourColor * lightColor * coeff;
    //color = texture(ourTexture, TexCoord) * vec4(diffuse, 1.0f);
    color = vec4(diffuse, 1.0f);
}
